window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "aqua_blue", "modulename": "aqua_blue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "aqua_blue.datetimelikearray", "modulename": "aqua_blue.datetimelikearray", "kind": "module", "doc": "<p>Module providing a timezone-aware wrapper for NumPy arrays.</p>\n\n<p>Timezone awareness is a deprecated NumPy feature due to the deprecation of pytz.\nThis module provides a workaround by storing the timezone information separately in the array.\nThe datetime objects are stored in UTC and converted to the specified timezone when accessed.</p>\n\n<p>This implementation is designed specifically for one-dimensional arrays and is intended to\nsatisfy the datetime processing requirements of the project, rather than general NumPy timezone integration.</p>\n"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray", "kind": "class", "doc": "<p>A subclass of NumPy ndarray that provides timezone awareness for datetime arrays.</p>\n\n<p>The timezone information is stored separately since NumPy does not natively support\ntimezone-aware datetime objects. All datetime values are stored in UTC and converted\nback to the specified timezone when accessed.</p>\n", "bases": "numpy.ndarray"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray.__init__", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray.__init__", "kind": "function", "doc": "<p>Create a new instance of DatetimeLikeArray.</p>\n\n<p>Args:\n    input_array (Sequence[DatetimeLike]): List of datetime-like objects to be stored in the array.\n    dtype: Data type for the NumPy array.\n    buffer: Optional buffer for the array.\n    offset: Offset for the array.\n    strides: Strides for the array.\n    order: Memory layout order.</p>\n\n<p>Returns:\n    DatetimeLikeArray: A new instance of the class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_array</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">DatetimeLike</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span>,</span><span class=\"param\">\t<span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray.tz", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray.tz", "kind": "variable", "doc": "<p>The timezone associated with the array. Defaults to None (assumed UTC).</p>\n", "annotation": ": Optional[datetime.tzinfo]", "default_value": "None"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray.tz_offset", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray.tz_offset", "kind": "variable", "doc": "<p>The timezone offset from UTC for the stored datetime values. Defaults to None.</p>\n", "annotation": ": Optional[datetime.timedelta]", "default_value": "None"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray.to_list", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray.to_list", "kind": "function", "doc": "<p>Convert the array back to a list of datetime-like objects with timezone information.</p>\n\n<p>Returns:\n    List[DatetimeLike]: A list of datetime objects with their original timezone restored.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">DatetimeLike</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray.to_file", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray.to_file", "kind": "function", "doc": "<p>Save a DatetimeLikeArray instance to a text file.</p>\n\n<p>Args:\n    fp (Union[IO, str, Path]): File path or file-like object to write to.\n    tz (datetime.tzinfo, optional): Timezone in which to write the data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fp</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">IO</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">tzinfo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray.from_array", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray.from_array", "kind": "function", "doc": "<p>Convert a numpy array to a DatetimeLikeArray instance.</p>\n\n<p>Args:\n    input_array (np.ndarray): NumPy array containing datetime values.\n    tz (datetime.tzinfo, optional): Timezone of the input datetime values.</p>\n\n<p>Returns:\n    DatetimeLikeArray: A new instance with timezone awareness.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">tzinfo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.datetimelikearray.DatetimeLikeArray.from_fp", "modulename": "aqua_blue.datetimelikearray", "qualname": "DatetimeLikeArray.from_fp", "kind": "function", "doc": "<p>Load a text file and convert it to a DatetimeLikeArray instance.</p>\n\n<p>Args:\n    fp (Union[IO, str, Path]): File path or file-like object to read from.\n    dtype (Type): Data type of the values in the file.\n    tz (datetime.tzinfo, optional): Timezone to assign to the loaded data.</p>\n\n<p>Returns:\n    DatetimeLikeArray: A new instance with timezone awareness.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fp</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">IO</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">Type</span>,</span><span class=\"param\">\t<span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">tzinfo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.models", "modulename": "aqua_blue.models", "kind": "module", "doc": "<p>Module defining models, i.e., compositions of reservoir(s) and readout layers.</p>\n\n<p>This module implements the <code>Model</code> class, which integrates a reservoir and a readout\nlayer to process time series data. The model enables training using input time series\ndata and forecasting future values based on learned patterns.</p>\n\n<p>Classes:\n    - Model: Represents an Echo State Network (ESN)-based model that learns from\n      input time series data and makes future predictions.</p>\n"}, {"fullname": "aqua_blue.models.Model", "modulename": "aqua_blue.models", "qualname": "Model", "kind": "class", "doc": "<p>A machine learning model that integrates a reservoir with a readout layer for\ntime series forecasting.</p>\n\n<p>This class implements an Echo State Network (ESN) approach, where the reservoir\nserves as a high-dimensional dynamic system, and the readout layer maps reservoir\nstates to output values.</p>\n\n<p>Attributes:\n    reservoir (Reservoir):\n        The reservoir component, defining the input-to-reservoir mapping.\n    readout (Readout):\n        The readout layer, mapping reservoir states to output values.\n    final_time (float):\n        The last timestamp seen during training. This is set automatically after training.\n    timestep (float):\n        The fixed time interval between consecutive steps in the input time series,\n        set during training.\n    initial_guess (np.ndarray):\n        The last observed state of the system during training, used as an initial\n        condition for predictions.\n    tz (Union[datetime.tzinfo, None]):\n        The timezone associated with the time series. Set to <code>None</code> if the <code>DatetimeLikeArray</code>\n        is incompatible.</p>\n"}, {"fullname": "aqua_blue.models.Model.__init__", "modulename": "aqua_blue.models", "qualname": "Model.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">reservoir</span><span class=\"p\">:</span> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">reservoirs</span><span class=\"o\">.</span><span class=\"n\">Reservoir</span>,</span><span class=\"param\">\t<span class=\"n\">readout</span><span class=\"p\">:</span> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">readouts</span><span class=\"o\">.</span><span class=\"n\">Readout</span></span>)</span>"}, {"fullname": "aqua_blue.models.Model.reservoir", "modulename": "aqua_blue.models", "qualname": "Model.reservoir", "kind": "variable", "doc": "<p>The reservoir component that defines the input-to-reservoir mapping.</p>\n", "annotation": ": aqua_blue.reservoirs.Reservoir"}, {"fullname": "aqua_blue.models.Model.readout", "modulename": "aqua_blue.models", "qualname": "Model.readout", "kind": "variable", "doc": "<p>The readout component that defines the reservoir-to-output mapping.</p>\n", "annotation": ": aqua_blue.readouts.Readout"}, {"fullname": "aqua_blue.models.Model.final_time", "modulename": "aqua_blue.models", "qualname": "Model.final_time", "kind": "variable", "doc": "<p>The final timestamp encountered in the training dataset (set during training).</p>\n", "annotation": ": float"}, {"fullname": "aqua_blue.models.Model.timestep", "modulename": "aqua_blue.models", "qualname": "Model.timestep", "kind": "variable", "doc": "<p>The fixed time step interval of the training dataset (set during training).</p>\n", "annotation": ": float"}, {"fullname": "aqua_blue.models.Model.initial_guess", "modulename": "aqua_blue.models", "qualname": "Model.initial_guess", "kind": "variable", "doc": "<p>The last observed state of the system, used for future predictions (set during training).</p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.floating]]"}, {"fullname": "aqua_blue.models.Model.tz", "modulename": "aqua_blue.models", "qualname": "Model.tz", "kind": "variable", "doc": "<p>The timezone associated with the independent variable. Set to <code>None</code> if unsupported.</p>\n", "annotation": ": Optional[datetime.tzinfo]"}, {"fullname": "aqua_blue.models.Model.train", "modulename": "aqua_blue.models", "qualname": "Model.train", "kind": "function", "doc": "<p>Trains the model on the provided time series data.</p>\n\n<p>This method fits the readout layer using reservoir states obtained from the\ninput time series data. A warmup period can be specified to exclude initial\nsteps from training.</p>\n\n<p>Args:\n    input_time_series (TimeSeries):\n        The time series instance used for training.\n    warmup (int):\n        The number of initial steps to ignore in training (default: 0).\n    rcond (float):\n        The threshold for pseudo-inverse computation. Increase if predictions\n        become unstable (default: <code>1.0e-10</code>).</p>\n\n<p>Raises:\n    ValueError: If <code>warmup</code> is greater than or equal to the number of timesteps\n                in the input time series.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_time_series</span><span class=\"p\">:</span> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>,</span><span class=\"param\">\t<span class=\"n\">warmup</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rcond</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.models.Model.predict", "modulename": "aqua_blue.models", "qualname": "Model.predict", "kind": "function", "doc": "<p>Generates future predictions for a specified time horizon.</p>\n\n<p>This method uses the trained model to generate future values based on the\nlearned dynamics of the input time series.</p>\n\n<p>Args:\n    horizon (int):\n        The number of steps to forecast into the future.</p>\n\n<p>Returns:\n    TimeSeries: A <code>TimeSeries</code> instance containing the predicted values and\n    corresponding timestamps.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">horizon</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.readouts", "modulename": "aqua_blue.readouts", "kind": "module", "doc": "<p>Module defining readout layers.</p>\n\n<p>This module provides the abstract <code>Readout</code> class and its concrete implementation,\n<code>LinearReadout</code>. Readout layers map the internal reservoir states of an Echo State\nNetwork (ESN) to output values.</p>\n\n<p>Classes:\n    - Readout: Abstract base class defining the interface for readout layers.\n    - LinearReadout: A linear mapping readout layer that transforms reservoir states\n      into output values using learned coefficients.</p>\n"}, {"fullname": "aqua_blue.readouts.Readout", "modulename": "aqua_blue.readouts", "qualname": "Readout", "kind": "class", "doc": "<p>Abstract base class for readout layers in Echo State Networks (ESNs).</p>\n\n<p>Readout layers transform the high-dimensional reservoir states into output\npredictions. The transformation is typically learned during training.</p>\n\n<p>Attributes:\n    coefficients (np.ndarray):\n        The learned weights for mapping reservoir states to output values.\n        This is set after training.</p>\n", "bases": "abc.ABC"}, {"fullname": "aqua_blue.readouts.Readout.coefficients", "modulename": "aqua_blue.readouts", "qualname": "Readout.coefficients", "kind": "variable", "doc": "<p>The learned weight matrix for the readout layer, initialized during training.</p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.floating]]"}, {"fullname": "aqua_blue.readouts.Readout.train", "modulename": "aqua_blue.readouts", "qualname": "Readout.train", "kind": "function", "doc": "<p>Trains the readout layer by learning the mapping from reservoir states to output values.</p>\n\n<p>This method takes independent input variables (reservoir states) and corresponding\ndependent variables (target outputs) to compute the optimal readout weights.</p>\n\n<p>Args:\n    independent_variables (np.ndarray):\n        The reservoir state matrix used as input for training.\n    dependent_variables (np.ndarray):\n        The expected output values corresponding to the input states.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">independent_variables</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">dependent_variables</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.readouts.Readout.reservoir_to_output", "modulename": "aqua_blue.readouts", "qualname": "Readout.reservoir_to_output", "kind": "function", "doc": "<p>Maps a given reservoir state to an output value.</p>\n\n<p>Args:\n    reservoir_state (np.ndarray):\n        The current state of the reservoir.</p>\n\n<p>Returns:\n    np.ndarray: The predicted output corresponding to the given reservoir state.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reservoir_state</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.readouts.LinearReadout", "modulename": "aqua_blue.readouts", "qualname": "LinearReadout", "kind": "class", "doc": "<p>A linear readout layer that applies a learned linear transformation to reservoir states.</p>\n\n<p>This readout layer learns a set of coefficients during training and applies a\nsimple linear mapping to transform reservoir states into output predictions.</p>\n\n<p>Attributes:\n    rcond (float):\n        A regularization parameter used in the pseudo-inverse calculation to\n        prevent numerical instability in the least squares solution.</p>\n", "bases": "Readout"}, {"fullname": "aqua_blue.readouts.LinearReadout.__init__", "modulename": "aqua_blue.readouts", "qualname": "LinearReadout.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rcond</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-10</span></span>)</span>"}, {"fullname": "aqua_blue.readouts.LinearReadout.rcond", "modulename": "aqua_blue.readouts", "qualname": "LinearReadout.rcond", "kind": "variable", "doc": "<p>Regularization parameter for pseudo-inverse computation.</p>\n\n<p>This controls the minimum singular value considered for the pseudo-inverse \ncomputation. A lower value ensures more stable training.</p>\n", "annotation": ": float", "default_value": "1e-10"}, {"fullname": "aqua_blue.readouts.LinearReadout.train", "modulename": "aqua_blue.readouts", "qualname": "LinearReadout.train", "kind": "function", "doc": "<p>Trains the linear readout layer by solving the least-squares optimization problem.</p>\n\n<p>The training process determines the optimal readout coefficients ( W^* ) by\nminimizing the error in the following equation:</p>\n\n<p>[\nW^* = \\lim_{\\lambda\\to 0^+} \\arg\\min_W \\| XW - Y\\|_F^2 + \\lambda \\|W\\|_F^2\n]</p>\n\n<p>where:\n    - ( X ) is the matrix of reservoir states (independent variables).\n    - ( Y ) is the matrix of target output values (dependent variables).\n    - ( \\lambda ) is the regularization parameter controlled by <code>rcond</code>.</p>\n\n<p>Args:\n    independent_variables (np.ndarray):\n        The reservoir state matrix used for training.\n    dependent_variables (np.ndarray):\n        The target output values corresponding to the reservoir states.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">independent_variables</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">dependent_variables</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.readouts.LinearReadout.reservoir_to_output", "modulename": "aqua_blue.readouts", "qualname": "LinearReadout.reservoir_to_output", "kind": "function", "doc": "<p>Computes the output from a given reservoir state using a learned linear mapping.</p>\n\n<p>This method applies the learned weight matrix (<code>self.coefficients</code>) to map\nthe reservoir state to an output value.</p>\n\n<p>Args:\n    reservoir_state (np.ndarray):\n        The reservoir state to be mapped to an output value.</p>\n\n<p>Returns:\n    np.ndarray: The predicted output value.</p>\n\n<p>Raises:\n    ValueError: If the readout layer has not been trained (i.e., coefficients are not set).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reservoir_state</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.reservoirs", "modulename": "aqua_blue.reservoirs", "kind": "module", "doc": "<p>Module defining reservoirs.</p>\n\n<p>This module contains the base <code>Reservoir</code> class and its concrete implementation,\n<code>DynamicalReservoir</code>. Reservoirs serve as dynamic memory structures in Echo State\nNetworks (ESNs) by transforming input signals into high-dimensional representations.</p>\n\n<p>Classes:\n    - Reservoir: Abstract base class defining the structure of a reservoir.\n    - DynamicalReservoir: A specific implementation of a reservoir with tunable\n      dynamics and activation functions.</p>\n"}, {"fullname": "aqua_blue.reservoirs.ActivationFunction", "modulename": "aqua_blue.reservoirs", "qualname": "ActivationFunction", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ActivationFunction&#x27;"}, {"fullname": "aqua_blue.reservoirs.Reservoir", "modulename": "aqua_blue.reservoirs", "qualname": "Reservoir", "kind": "class", "doc": "<p>Abstract base class defining a reservoir in an Echo State Network (ESN).</p>\n\n<p>Reservoirs are responsible for transforming input signals into high-dimensional\nrepresentations, which are then used by the readout layer for predictions.</p>\n\n<p>Attributes:\n    input_dimensionality (int):\n        The number of input features.\n    reservoir_dimensionality (int):\n        The number of reservoir neurons (i.e., the size of the reservoir).\n    res_state (np.ndarray):\n        The current state of the reservoir, which is updated at each time step.</p>\n", "bases": "abc.ABC"}, {"fullname": "aqua_blue.reservoirs.Reservoir.input_dimensionality", "modulename": "aqua_blue.reservoirs", "qualname": "Reservoir.input_dimensionality", "kind": "variable", "doc": "<p>Dimensionality of the input state.</p>\n", "annotation": ": int"}, {"fullname": "aqua_blue.reservoirs.Reservoir.reservoir_dimensionality", "modulename": "aqua_blue.reservoirs", "qualname": "Reservoir.reservoir_dimensionality", "kind": "variable", "doc": "<p>Dimensionality of the reservoir state, equivalently the reservoir size.</p>\n", "annotation": ": int"}, {"fullname": "aqua_blue.reservoirs.Reservoir.res_state", "modulename": "aqua_blue.reservoirs", "qualname": "Reservoir.res_state", "kind": "variable", "doc": "<p>Reservoir state, necessary property when performing training loop.</p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.floating]]"}, {"fullname": "aqua_blue.reservoirs.Reservoir.update_reservoir", "modulename": "aqua_blue.reservoirs", "qualname": "Reservoir.update_reservoir", "kind": "function", "doc": "<p>Updates the reservoir state given an input state.</p>\n\n<p>This method defines the transformation applied to an input vector when passed\nthrough the reservoir.</p>\n\n<p>Args:\n    input_state (np.ndarray):\n        The input state vector.</p>\n\n<p>Returns:\n    np.ndarray: The updated reservoir state.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_state</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir", "kind": "class", "doc": "<p>A dynamical reservoir with tunable properties.</p>\n\n<p>This reservoir is defined by the equation:</p>\n\n<p>[\ny_t = (1 - \u0007lpha) y_{t-1} + \u0007lpha f(W_{in} x_t + W_{res} y_{t-1})\n]</p>\n\n<p>where:\n    - ( x_t ) is the input at time step ( t ).\n    - ( y_t ) is the reservoir state at time ( t ).\n    - ( W_{in} ) is the input weight matrix.\n    - ( W_{res} ) is the reservoir weight matrix.\n    - ( \u0007lpha ) (leaking_rate) controls how much of the previous state influences the next state.\n    - ( f ) is a nonlinear activation function.</p>\n\n<p>Attributes:\n    generator (Optional[np.random.Generator]):\n        Random number generator for weight initialization.\n    w_in (Optional[np.ndarray]):\n        Input weight matrix of shape <code>(reservoir_dimensionality, input_dimensionality)</code>.\n        Auto-generated if not provided.\n    w_res (Optional[np.ndarray]):\n        Reservoir weight matrix of shape <code>(reservoir_dimensionality, reservoir_dimensionality)</code>.\n        Auto-generated if not provided.\n    activation_function (ActivationFunction):\n        Activation function applied to the reservoir state. Defaults to <code>np.tanh</code>.\n    leaking_rate (float):\n        Leaking rate that controls the contribution of the previous state.</p>\n", "bases": "Reservoir"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir.__init__", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dimensionality</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">reservoir_dimensionality</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">generator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">_generator</span><span class=\"o\">.</span><span class=\"n\">Generator</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">w_in</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">w_res</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">activation_function</span><span class=\"p\">:</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;ActivationFunction&#39;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ufunc</span> <span class=\"s1\">&#39;tanh&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">leaking_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir.generator", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir.generator", "kind": "variable", "doc": "<p>Random generator for initializing weights.\nDefaults to <code>np.random.default_rng(seed=0)</code> if not specified.</p>\n", "annotation": ": Optional[numpy.random._generator.Generator]", "default_value": "None"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir.w_in", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir.w_in", "kind": "variable", "doc": "<p>Input weight matrix.\nMust have shape <code>(reservoir_dimensionality, input_dimensionality)</code>.\nIf not provided, it is auto-generated with values in <code>[-0.5, 0.5]</code>.</p>\n", "annotation": ": Optional[numpy.ndarray[Any, numpy.dtype[numpy.floating]]]", "default_value": "None"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir.w_res", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir.w_res", "kind": "variable", "doc": "<p>Reservoir weight matrix.\nMust have shape <code>(reservoir_dimensionality, reservoir_dimensionality)</code>.\nIf not provided, it is auto-generated and normalized to have a spectral radius of 0.95.</p>\n", "annotation": ": Optional[numpy.ndarray[Any, numpy.dtype[numpy.floating]]]", "default_value": "None"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir.activation_function", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir.activation_function", "kind": "variable", "doc": "<p>Nonlinear activation function applied to the reservoir state.\nDefaults to <code>np.tanh</code>, but can be replaced with other functions like ReLU.</p>\n", "annotation": ": ForwardRef(&#x27;ActivationFunction&#x27;)", "default_value": "&lt;ufunc &#x27;tanh&#x27;&gt;"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir.leaking_rate", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir.leaking_rate", "kind": "variable", "doc": "<p>Leaking rate ((\u0007lpha)) that controls how much of the previous state contributes to the next.\nDefaults to <code>1.0</code>, meaning the state is fully updated at each time step.</p>\n", "annotation": ": float", "default_value": "1.0"}, {"fullname": "aqua_blue.reservoirs.DynamicalReservoir.update_reservoir", "modulename": "aqua_blue.reservoirs", "qualname": "DynamicalReservoir.update_reservoir", "kind": "function", "doc": "<p>Updates the reservoir state given an input.</p>\n\n<p>This method applies the state update equation:</p>\n\n<p>[\ny_t = (1 - \u0007lpha) y_{t-1} + \u0007lpha f(W_{in} x_t + W_{res} y_{t-1})\n]</p>\n\n<p>Args:\n    input_state (np.ndarray):\n        The input state vector.</p>\n\n<p>Returns:\n    np.ndarray: The updated reservoir state.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_state</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.time_series", "modulename": "aqua_blue.time_series", "kind": "module", "doc": "<p>Module defining the TimeSeries object</p>\n"}, {"fullname": "aqua_blue.time_series.ShapeChangedWarning", "modulename": "aqua_blue.time_series", "qualname": "ShapeChangedWarning", "kind": "class", "doc": "<p>Warning for cases where TimeSeries.__post_init__ alters the shape of the dependent variable.</p>\n", "bases": "builtins.Warning"}, {"fullname": "aqua_blue.time_series.TimeSeries", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries", "kind": "class", "doc": "<p>A class representing a time series, encapsulating dependent variables and corresponding timestamps.</p>\n"}, {"fullname": "aqua_blue.time_series.TimeSeries.__init__", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dependent_variable</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">floating</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">datetimelikearray</span><span class=\"o\">.</span><span class=\"n\">DatetimeLikeArray</span></span>)</span>"}, {"fullname": "aqua_blue.time_series.TimeSeries.dependent_variable", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries.dependent_variable", "kind": "variable", "doc": "<p>Array of dependent variables representing the time series values.</p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.floating]]"}, {"fullname": "aqua_blue.time_series.TimeSeries.times", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries.times", "kind": "variable", "doc": "<p>Array of time values associated with the dependent variable.</p>\n", "annotation": ": aqua_blue.datetimelikearray.DatetimeLikeArray"}, {"fullname": "aqua_blue.time_series.TimeSeries.save", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries.save", "kind": "function", "doc": "<p>Saves the time series data to a file.</p>\n\n<p>Args:\n    fp (Union[IO, str, Path]): File path or object where the TimeSeries instance will be saved.\n    header (str, optional): An optional header. Defaults to an empty string.\n    delimiter (str, optional): The delimiter used in the output file. Defaults to a comma.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fp</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">IO</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.time_series.TimeSeries.num_dims", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries.num_dims", "kind": "variable", "doc": "<p>Returns the dimensionality of the dependent variable.</p>\n\n<p>Returns:\n    int: Number of dimensions of the time series.</p>\n", "annotation": ": int"}, {"fullname": "aqua_blue.time_series.TimeSeries.from_csv", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries.from_csv", "kind": "function", "doc": "<p>Loads time series data from a CSV file.</p>\n\n<p>Args:\n    fp (Union[IO, str, Path]): File path or object to read from.\n    time_index (int, optional): Column index corresponding to time values. Defaults to 0.\n    tz (ZoneInfo, optional): Timezone to apply to the time data. Defaults to None.</p>\n\n<p>Returns:\n    TimeSeries: A TimeSeries instance populated by data from the csv file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">fp</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">IO</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.time_series.TimeSeries.timestep", "modulename": "aqua_blue.time_series", "qualname": "TimeSeries.timestep", "kind": "variable", "doc": "<p>Returns the time step between consecutive observations.</p>\n\n<p>Returns:\n    float: The timestep of the time series.</p>\n", "annotation": ": float"}, {"fullname": "aqua_blue.utilities", "modulename": "aqua_blue.utilities", "kind": "module", "doc": "<p>This module provides simple utilities for processing TimeSeries instances.</p>\n"}, {"fullname": "aqua_blue.utilities.Normalizer", "modulename": "aqua_blue.utilities", "qualname": "Normalizer", "kind": "class", "doc": "<p>A utility class for normalizing and denormalizing TimeSeries instances.</p>\n\n<p>This class computes and stores the mean and standard deviation of the\ndependent variable during normalization. These statistics are later used\nto restore the original scale of the data when denormalizing.</p>\n"}, {"fullname": "aqua_blue.utilities.Normalizer.means", "modulename": "aqua_blue.utilities", "qualname": "Normalizer.means", "kind": "variable", "doc": "<p>Mean values of the dependent variable, computed during normalization.</p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.floating]]"}, {"fullname": "aqua_blue.utilities.Normalizer.standard_deviations", "modulename": "aqua_blue.utilities", "qualname": "Normalizer.standard_deviations", "kind": "variable", "doc": "<p>Standard deviation values of the dependent variable, computed during normalization.</p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.floating]]"}, {"fullname": "aqua_blue.utilities.Normalizer.normalize", "modulename": "aqua_blue.utilities", "qualname": "Normalizer.normalize", "kind": "function", "doc": "<p>Normalize a TimeSeries instance by adjusting its values to have zero mean and unit variance.</p>\n\n<p>Args:\n    time_series (TimeSeries): The time series to be normalized.</p>\n\n<p>Returns:\n    TimeSeries: A new TimeSeries instance with normalized values.</p>\n\n<p>Raises:\n    ValueError: If the normalizer has already been used, since it is intended for one-time use.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_series</span><span class=\"p\">:</span> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "aqua_blue.utilities.Normalizer.denormalize", "modulename": "aqua_blue.utilities", "qualname": "Normalizer.denormalize", "kind": "function", "doc": "<p>Denormalize a previously normalized TimeSeries instance, restoring it to its original scale.</p>\n\n<p>Args:\n    time_series (TimeSeries): The time series to be denormalized.</p>\n\n<p>Returns:\n    TimeSeries: A new TimeSeries instance with denormalized values.</p>\n\n<p>Raises:\n    ValueError: If normalization has not been performed before calling this method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_series</span><span class=\"p\">:</span> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aqua_blue</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();